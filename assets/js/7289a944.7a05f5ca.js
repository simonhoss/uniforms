"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[487],{35318:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return p}});var t=r(27378);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(r),p=a,g=u["".concat(l,".").concat(p)]||u[p]||m[p]||i;return r?t.createElement(g,o(o({ref:n},c),{},{components:r})):t.createElement(g,o({ref:n},c))}));function p(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},31127:function(e,n,r){r.r(n),r.d(n,{assets:function(){return l},contentTitle:function(){return o},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return d}});var t=r(25773),a=(r(27378),r(35318));const i={id:"examples-custom-bridge",title:"Custom bridge & validator"},o=void 0,s={unversionedId:"examples-custom-bridge",id:"examples-custom-bridge",title:"Custom bridge & validator",description:"In this example, we will create an ordinary login form, with login, password, and password confirmation fields.",source:"@site/../docs/examples-custom-bridge.md",sourceDirName:".",slug:"/examples-custom-bridge",permalink:"/docs/examples-custom-bridge",tags:[],version:"current",frontMatter:{id:"examples-custom-bridge",title:"Custom bridge & validator"},sidebar:"docs",previous:{title:"Custom fields",permalink:"/docs/examples-custom-fields"},next:{title:"Custom form",permalink:"/docs/examples-custom-form"}},l={},d=[{value:"Schema definition",id:"schema-definition",level:3},{value:"Validator definition",id:"validator-definition",level:3},{value:"The Bridge!",id:"the-bridge",level:3},{value:"Usage",id:"usage",level:3}],c={toc:d};function m(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In this example, we will create an ordinary login form, with login, password, and password confirmation fields."),(0,a.kt)("h3",{id:"schema-definition"},"Schema definition"),(0,a.kt)("p",null,"We'll start with defining a schema.\nIt's an object with three keys, representing our fields.\nEach of them has the following self-explanatory properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"__type__")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"required")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"initialValue")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"label"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const UserLoginSchema = {\n  login: {\n    __type__: String,\n    required: true,\n    initialValue: '',\n    label: 'Login',\n  },\n  password1: {\n    __type__: String,\n    required: true,\n    initialValue: '',\n    label: 'Password',\n  },\n  password2: {\n    __type__: String,\n    required: true,\n    initialValue: '',\n    label: 'Password (again)',\n  },\n};\n\nexport default UserLoginSchema;\n")),(0,a.kt)("h3",{id:"validator-definition"},"Validator definition"),(0,a.kt)("p",null,"When the schema is ready, our next step is to provide a way to check if the values received from our form are correct.\nIn order to do so, we prepare a validation function.\nThat function, called validator, takes a model (the submitted object) as input and throws an error whether any value doesn't meet given criteria."),(0,a.kt)("p",null,"In our case we say 'form is invalid' when there's no login or password at all,\nlogin has less then 5 characters, password has lass then 10 characters or given passwords mismatch:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const UserLoginSchemaValidator = model => {\n  const error = {};\n\n  if (!model.login) {\n    error.login = 'Login is required!';\n  } else if (model.login.length < 5) {\n    error.login = 'Login has to be at least 5 characters long!';\n  }\n\n  if (!model.password1) {\n    error.password1 = 'Password is required!';\n  } else if (model.password1.length < 10) {\n    error.login = 'Password has to be at least 10 characters long!';\n  }\n\n  if (model.password1 !== model.password2) {\n    error.password1 = 'Passwords mismatch!';\n  }\n\n  if (Object.keys(error).length) {\n    return error;\n  }\n};\n\nexport default UserLoginSchemaValidator;\n")),(0,a.kt)("h3",{id:"the-bridge"},"The Bridge!"),(0,a.kt)("p",null,"Now that both have the schema and the validator, we can define our bridge, which will be a binder between the form and the data itself.\nAll we have to do is to extend ",(0,a.kt)("inlineCode",{parentName:"p"},"Bridge")," class and implement its methods according to the ",(0,a.kt)("a",{parentName:"p",href:"/docs/uth-bridge-concept"},"Bridge concept"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Bridge } from 'uniforms';\n\nexport default class UserLoginSchemaBridge extends Bridge {\n  constructor(schema, validator) {\n    super();\n\n    this.schema = schema;\n    this.validator = validator;\n  }\n\n  getError(name, error) {\n    return error && error[name];\n  }\n\n  getErrorMessage(name, error) {\n    return (error && error[name]) || '';\n  }\n\n  getErrorMessages(error) {\n    return error ? Object.keys(this.schema).map(field => error[field]) : [];\n  }\n\n  getField(name) {\n    return this.schema[name.replace(/\\.\\d+/g, '.$')];\n  }\n\n  getType(name) {\n    return this.schema[name.replace(/\\.\\d+/g, '.$')].__type__;\n  }\n\n  getProps(name) {\n    return this.schema[name.replace(/\\.\\d+/g, '.$')];\n  }\n\n  getInitialValue(name) {\n    return this.schema[name.replace(/\\.\\d+/g, '.$')].initialValue;\n  }\n\n  getSubfields(name) {\n    return name\n      ? this.schema[name.replace(/\\.\\d+/g, '.$')].subfields || []\n      : Object.keys(this.schema).filter(field => field.indexOf('.') === -1);\n  }\n\n  getValidator() {\n    return this.validator;\n  }\n}\n")),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("p",null,"After our custom bridge is created, we can use in the very same way as we would use predefined one -\nwe have to supply the schema and validator and then we can take an advantage of it in the AutoForm:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import UserLoginSchema from './UserLoginSchema';\nimport UserLoginSchemaBridge from './UserLoginSchemaBridge';\nimport UserLoginSchemaValidator from './UserLoginSchemaValidator';\n\nconst bridge = new UserLoginSchemaBridge(\n  UserLoginSchema,\n  UserLoginSchemaValidator,\n);\n\n<AutoForm schema={bridge} />;\n")))}m.isMDXComponent=!0}}]);