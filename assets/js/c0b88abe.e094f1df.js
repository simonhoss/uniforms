"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[517],{35318:function(e,t,a){a.d(t,{Zo:function(){return s},kt:function(){return k}});var n=a(27378);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(a),k=r,N=c["".concat(d,".").concat(k)]||c[k]||m[k]||l;return a?n.createElement(N,i(i({ref:t},s),{},{components:a})):n.createElement(N,i({ref:t},s))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},64574:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p}});var n=a(25773),r=(a(27378),a(35318));const l={id:"api-fields",title:"Fields"},i=void 0,o={unversionedId:"api-fields",id:"api-fields",title:"Fields",description:"uniforms provide a set of predefined components that can be used as form fields.",source:"@site/../docs/api-fields.md",sourceDirName:".",slug:"/api-fields",permalink:"/docs/api-fields",tags:[],version:"current",frontMatter:{id:"api-fields",title:"Fields"},sidebar:"docs",previous:{title:"Forms",permalink:"/docs/api-forms"},next:{title:"Bridges",permalink:"/docs/api-bridges"}},d={},p=[{value:"Fields",id:"fields",level:2},{value:"<code>AutoField</code>",id:"autofield",level:3},{value:"Props:",id:"props",level:5},{value:"Props usage:",id:"props-usage",level:5},{value:"<code>AutoFields</code>",id:"autofields",level:3},{value:"Props:",id:"props-1",level:5},{value:"Props usage:",id:"props-usage-1",level:5},{value:"<code>BoolField</code>",id:"boolfield",level:3},{value:"Props:",id:"props-2",level:5},{value:"Props usage:",id:"props-usage-2",level:5},{value:"<code>DateField</code>",id:"datefield",level:3},{value:"Props:",id:"props-3",level:5},{value:"Props usage:",id:"props-usage-3",level:5},{value:"<code>ErrorField</code>",id:"errorfield",level:3},{value:"Props:",id:"props-4",level:5},{value:"Props usage:",id:"props-usage-4",level:5},{value:"<code>ErrorsField</code>",id:"errorsfield",level:3},{value:"Props:",id:"props-5",level:5},{value:"Props usage:",id:"props-usage-5",level:5},{value:"<code>HiddenField</code>",id:"hiddenfield",level:3},{value:"Props:",id:"props-6",level:5},{value:"Props usage:",id:"props-usage-6",level:5},{value:"<code>ListAddField</code>",id:"listaddfield",level:3},{value:"Props:",id:"props-7",level:5},{value:"Props usage:",id:"props-usage-7",level:5},{value:"<code>ListDelField</code>",id:"listdelfield",level:3},{value:"Props:",id:"props-8",level:5},{value:"Props usage:",id:"props-usage-8",level:5},{value:"<code>ListField</code>",id:"listfield",level:3},{value:"Props:",id:"props-9",level:5},{value:"Props usage:",id:"props-usage-9",level:5},{value:"<code>ListItemField</code>",id:"listitemfield",level:3},{value:"Props usage:",id:"props-usage-10",level:5},{value:"<code>LongTextField</code>",id:"longtextfield",level:3},{value:"Props:",id:"props-10",level:5},{value:"Props usage:",id:"props-usage-11",level:5},{value:"<code>NestField</code>",id:"nestfield",level:3},{value:"Props:",id:"props-11",level:5},{value:"Props usage:",id:"props-usage-12",level:5},{value:"<code>NumField</code>",id:"numfield",level:3},{value:"Props:",id:"props-12",level:5},{value:"Props usage:",id:"props-usage-13",level:5},{value:"<code>RadioField</code>",id:"radiofield",level:3},{value:"Props:",id:"props-13",level:5},{value:"Props usage:",id:"props-usage-14",level:5},{value:"<code>SelectField</code>",id:"selectfield",level:3},{value:"Props:",id:"props-14",level:5},{value:"Props usage:",id:"props-usage-15",level:5},{value:"<code>SubmitField</code>",id:"submitfield",level:3},{value:"Props:",id:"props-15",level:5},{value:"Props usage:",id:"props-usage-16",level:5},{value:"<code>TextField</code>",id:"textfield",level:3},{value:"Props:",id:"props-16",level:5},{value:"Props usage:",id:"props-usage-17",level:5},{value:"Common props",id:"common-props",level:2},{value:"Props usage:",id:"props-usage-18",level:5},{value:"Props propagation",id:"props-propagation",level:2}],s={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"uniforms provide a set of predefined components that can be used as form fields."),(0,r.kt)("p",null,"The list below contains a guaranteed set of fields, implemented in every theme package:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Component"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"AutoField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Automatically renders a given field.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"AutoFields")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Automatically renders given fields.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"BoolField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Checkbox.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"DateField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"HTML5 ",(0,r.kt)("inlineCode",{parentName:"td"},"date")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"datetime-local")," input.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ErrorField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Error message for a given field.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ErrorsField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Error message with a list of validation errors.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"HiddenField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Hidden field (with a possibility to omit in DOM).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ListAddField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"An icon with action to add a list item.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ListDelField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"An icon with action to remove a list item.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ListField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"List of nested fields.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ListItemField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Single list item wrapper.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"LongTextField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Textarea.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"NestField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Block of nested fields.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"NumField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Numeric input.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"RadioField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Radio checkbox.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"SelectField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Select (or set of radio checkboxes).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"SubmitField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Submit button.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"TextField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Text (or any HTML5 compatible) input.")))),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("h3",{id:"autofield"},(0,r.kt)("inlineCode",{parentName:"h3"},"AutoField")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AutoField")," is basically a field renderer - it will render a field of a type adequate to the one defined in the schema,\naccording to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/uth-autofield-algorithm"},(0,r.kt)("inlineCode",{parentName:"a"},"AutoField")," algorithm"),".\nYou can also directly pass a component to it (by a ",(0,r.kt)("inlineCode",{parentName:"p"},"component")," prop).\nAll additional props will be passed to the result field component."),(0,r.kt)("h5",{id:"props"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"component")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field according to the ",(0,r.kt)("inlineCode",{parentName:"td"},"AutoField")," algorithm"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Component to render")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Name of the field in the schema")))),(0,r.kt)("h5",{id:"props-usage"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { AutoField } from 'uniforms-unstyled';\n\n<AutoField component={MyComponent} />;\n")),(0,r.kt)("h3",{id:"autofields"},(0,r.kt)("inlineCode",{parentName:"h3"},"AutoFields")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AutoFields")," is basically a set of rendered ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoField"),"s.\nBy default, the rendered fields will be ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoField")," in a chosen theme.\nHowever, you can replace the standard ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoField")," with ",(0,r.kt)("a",{parentName:"p",href:"/docs/uth-autofield-algorithm#overriding-autofield"},(0,r.kt)("inlineCode",{parentName:"a"},"AutoField.componentDetectorContext")),".\nThere is also an ",(0,r.kt)("inlineCode",{parentName:"p"},"autoField")," prop, but ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/issues/980"},"it's deprecated")," and will be removed in a future release."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"element")," property defines a wrapping component.\nE.g. you want to group your fields inside a section, just do ",(0,r.kt)("inlineCode",{parentName:"p"},'element="section"'),". The default one is ",(0,r.kt)("inlineCode",{parentName:"p"},"div"),"."),(0,r.kt)("h5",{id:"props-1"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"autoField")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Standard ",(0,r.kt)("inlineCode",{parentName:"td"},"AutoField")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"AutoField")," component to render (see ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/vazco/uniforms/issues/980"},"#980"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"element")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"div")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Fields wrapper")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"fields")),(0,r.kt)("td",{parentName:"tr",align:"center"},"All schema fields"),(0,r.kt)("td",{parentName:"tr",align:"center"},"List of fields to render")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"omitFields")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"[]")),(0,r.kt)("td",{parentName:"tr",align:"center"},"List of fields to omit")))),(0,r.kt)("h5",{id:"props-usage-1"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { AutoFields } from 'uniforms-unstyled';\n\n<AutoFields\n  autoField={MyAutoField}\n  element=\"section\"\n  fields={['fieldA', 'fieldB']}\n  omitFields={['fieldA', 'fieldB']}\n/>;\n")),(0,r.kt)("h3",{id:"boolfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"BoolField")),(0,r.kt)("p",null,"A checkbox."),(0,r.kt)("h5",{id:"props-2"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"appearance")),(0,r.kt)("td",{parentName:"tr",align:"center"},'Field appearance. Set to "toggle" to appear as a Material Toggle or to "checkbox" (or leave it undefined) to use a Checkbox appearance.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"material, mui")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"extra")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"feedbackable")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field feedback state. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"grid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"help")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help text. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"helpClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help block className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inline")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputRef")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelBefore")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label className. A custom className for the field's label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout of label. You can set span and/or offset."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5, semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field and sourroundings wrap className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapperCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout for input controls. Same as labelCol."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")))),(0,r.kt)("h5",{id:"props-usage-2"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { BoolField } from 'uniforms-unstyled';\n\n<BoolField\n  appearance=\"checkbox\" // Renders a material-ui Checkbox\n  appearance=\"toggle\" // Renders a material-ui Toggle\n  extra=\"Extra Feedback or Help\"\n  feedbackable\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  inline\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelBefore=\"Label\"\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),(0,r.kt)("h3",{id:"datefield"},(0,r.kt)("inlineCode",{parentName:"h3"},"DateField")),(0,r.kt)("h5",{id:"props-3"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"extra")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"feedbackable")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field feedback state. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"grid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"help")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help text. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"helpClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help block className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"icon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",(0,r.kt)("inlineCode",{parentName:"td"},"iconLeft")," prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"iconLeft")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"iconProps")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputRef")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label className. A custom className for the field's label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout of label. You can set span and/or offset."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelProps")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Props for the InputLabel"),(0,r.kt)("td",{parentName:"tr",align:"center"},"material, mui")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"max")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Maximum value. Date object."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"min")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Minimal value. Date object."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5, semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"timeFormat")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Display time picker in ampm (12hr) format or 24hr format."),(0,r.kt)("td",{parentName:"tr",align:"center"},"material, mui")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Display date and time or date only picker. Format value according to its type"),(0,r.kt)("td",{parentName:"tr",align:"center"},"All except antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field and sourroundings wrap className. In SemanticUI theme, this class name is used on ui input wrapper, so you can pass classes like small, huge, inverted, transparent etc."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5, semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapperCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout for input controls. Same as labelCol."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")))),(0,r.kt)("h5",{id:"props-usage-3"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { DateField } from 'uniforms-unstyled';\n\n<DateField\n  extra=\"Extra Feedback or Help\"\n  feedbackable\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelProps={{shrink: true, disableAnimation: true}}\n  max={new Date(2100, 1, 1)}\n  min={new Date(2000, 1, 1)}\n  showInlineError\n  timeFormat=\"ampm\"\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),(0,r.kt)("h3",{id:"errorfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"ErrorField")),(0,r.kt)("p",null,"Error message renderer."),(0,r.kt)("h5",{id:"props-4"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"children")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Custom content. By default, it will render a block with the error message (if any), but you can customize the content.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Target field. This field error should be used.")))),(0,r.kt)("h5",{id:"props-usage-4"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ErrorField } from 'uniforms-unstyled';\n\n<ErrorField children={children} name=\"field\" />;\n")),(0,r.kt)("h3",{id:"errorsfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"ErrorsField")),(0,r.kt)("p",null,"Error messages renderer."),(0,r.kt)("h5",{id:"props-5"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"children")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Custom content. By default, it will render a block with the error messages (if any), but you can customize the content.")))),(0,r.kt)("h5",{id:"props-usage-5"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ErrorsField } from 'uniforms-unstyled';\n\n<ErrorsField children={children} />;\n")),(0,r.kt)("h3",{id:"hiddenfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"HiddenField")),(0,r.kt)("h5",{id:"props-6"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field name. Used for identification. It should match your schema - if not, it will throw an error.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field value. This field has completely different semantics. When a value is set, then it's updating a current model instead of being passed to the field.")))),(0,r.kt)("h5",{id:"props-usage-6"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { HiddenField } from 'uniforms-unstyled';\n\n<HiddenField name=\"field\" value={value} />;\n")),(0,r.kt)("h3",{id:"listaddfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"ListAddField")),(0,r.kt)("h5",{id:"props-7"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"addIcon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Icon. By default, glyphicon is used."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," This is one of ",(0,r.kt)("em",{parentName:"p"},"internal")," components of ",(0,r.kt)("inlineCode",{parentName:"p"},"ListField"),"."),(0,r.kt)("h5",{id:"props-usage-7"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ListAddField } from 'uniforms-unstyled';\n\n<ListAddField addIcon={<MyAddIcon />} />;\n")),(0,r.kt)("h3",{id:"listdelfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"ListDelField")),(0,r.kt)("h5",{id:"props-8"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"removeIcon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Icon. By default, glyphicon is used."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," This is one of ",(0,r.kt)("em",{parentName:"p"},"internal")," components of ",(0,r.kt)("inlineCode",{parentName:"p"},"ListField"),"."),(0,r.kt)("h5",{id:"props-usage-8"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ListDelField } from 'uniforms-unstyled';\n\n<ListDelField removeIcon={<MyRemoveIcon />} />;\n")),(0,r.kt)("h3",{id:"listfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"ListField")),(0,r.kt)("h5",{id:"props-9"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"addIcon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"glyphicon"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Icon. It's passed to the ListAddField."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"initialCount")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Initial items count. At least this amount of fields will be rendered at the beginning."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"itemProps")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"ListItemField props. These props are passed to the ListItemField."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"removeIcon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"glyphicon"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Icon. It's passed to the ListDelField."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5, semantic")))),(0,r.kt)("h5",{id:"props-usage-9"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ListField } from 'uniforms-unstyled';\n\n<ListField\n  addIcon={<MyAddIcon />}\n  initialCount={5}\n  itemProps={\n    {\n      /* ... */\n    }\n  }\n  removeIcon={<MyRemoveIcon />}\n  showInlineError\n/>;\n")),(0,r.kt)("h3",{id:"listitemfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"ListItemField")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"removeIcon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"glyphicon"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Icon. It's passed to the ListDelField."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," This is one of ",(0,r.kt)("em",{parentName:"p"},"internal")," components of ",(0,r.kt)("inlineCode",{parentName:"p"},"ListField"),"."),(0,r.kt)("h5",{id:"props-usage-10"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ListItemField } from 'uniforms-unstyled';\n\n<ListItemField removeIcon={<MyRemoveIcon />} />;\n")),(0,r.kt)("h3",{id:"longtextfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"LongTextField")),(0,r.kt)("p",null,"A textarea."),(0,r.kt)("h5",{id:"props-10"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"extra")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"grid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"help")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help text. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"helpClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help block className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"icon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",(0,r.kt)("inlineCode",{parentName:"td"},"iconLeft")," prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"iconLeft")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"iconProps")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inline")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputRef")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelBefore")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label className. A custom className for the field's label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout of label. You can set span and/or offset."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5, semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapperCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout for input controls. Same as labelCol."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field and sourroundings wrap className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")))),(0,r.kt)("h5",{id:"props-usage-11"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { LongTextField } from 'uniforms-unstyled';\n\n<LongTextField\n  extra=\"Extra Feedback or Help\"\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),(0,r.kt)("h3",{id:"nestfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"NestField")),(0,r.kt)("h5",{id:"props-11"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"fields")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Array of rendered fields. If no custom content provided, only those fields are rendered. By default, All of nested fields are rendered."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"grouped")),(0,r.kt)("td",{parentName:"tr",align:"center"},'Add / remove "grouped" class from the field. In Semantic, fields can be grouped using this class. By default, this class is added to the NestField.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5, semantic")))),(0,r.kt)("h5",{id:"props-usage-12"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { NestField } from 'uniforms-unstyled';\n\n<NestField fields={['fieldA', 'fieldB' /* ... */]} grouped showInlineError />;\n")),(0,r.kt)("h3",{id:"numfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"NumField")),(0,r.kt)("p",null,"A numeric input field."),(0,r.kt)("h5",{id:"props-12"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"decimal")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Decimal mode. This will change value step from 1 to 0.01."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"extra")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"grid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"help")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help text. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"helpClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help block className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"icon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",(0,r.kt)("inlineCode",{parentName:"td"},"iconLeft")," prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"iconLeft")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"iconProps")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inline")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputRef")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelBefore")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Left label. In bootstrap themes, label is rendered on the right side of a checkbox. This label is rendered above the field."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label className. A custom className for the field's label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout of label. You can set span and/or offset."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"max")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Maximum value. Date object."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"min")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Minimal value. Date object."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5, semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"step")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input step."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapperCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout for input controls. Same as labelCol."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field and sourroundings wrap className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")))),(0,r.kt)("h5",{id:"props-usage-13"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { NumField } from 'uniforms-unstyled';\n\n<NumField\n  decimal\n  extra=\"Extra Feedback or Help\"\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  max={100}\n  min={10}\n  showInlineError\n  step={5}\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),(0,r.kt)("h3",{id:"radiofield"},(0,r.kt)("inlineCode",{parentName:"h3"},"RadioField")),(0,r.kt)("h5",{id:"props-13"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"allowedValues")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Array of allowed values. By default, those are extracted from your schema."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inline")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label className. A custom className for the field's label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout of label. You can set span and/or offset."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5, semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"transform")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label transform. Allows to transform the each value into a human-readable label"),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapperCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout for input controls. Same as labelCol."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")))),(0,r.kt)("h5",{id:"props-usage-14"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { RadioField } from 'uniforms-unstyled';\n\n<RadioField\n  allowedValues={[value1, value2 /* ... */]}\n  inline\n  inputClassName=\"a b c\"\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  transform={value => label}\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),(0,r.kt)("h3",{id:"selectfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"SelectField")),(0,r.kt)("h5",{id:"props-14"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"allowedValues")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Array of allowed values. By default, those are extracted from your schema."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"appearance")),(0,r.kt)("td",{parentName:"tr",align:"center"},'Field appearance. Set to "toggle" to appear as a Material Toggle or to "checkbox" (or leave it undefined) to use a Checkbox appearance.'),(0,r.kt)("td",{parentName:"tr",align:"center"},"material, mui")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"checkboxes")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Turn on checkbox/radio mode. It's always true in multiple (i.e. fieldType === Array) mode."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"disableItem")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Disable items (options) based on a given predicate."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"extra")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Extra feedback text. In the antd theme, this renders additional help text below any validation messages."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"help")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help text. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"helpClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help block className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inline")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Checkbox inline state. In bootstrap themes, a label is rendered as a text but in inline mode, it's treated as a field label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputRef")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label className. A custom className for the field's label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout of label. You can set span and/or offset."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelProps")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Props for the InputLabel"),(0,r.kt)("td",{parentName:"tr",align:"center"},"material, mui")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Options. It is optional and using ",(0,r.kt)("inlineCode",{parentName:"td"},"options")," will override ",(0,r.kt)("inlineCode",{parentName:"td"},"transform")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"allowedValues"),". It can be either an object or an array (or a function, that returns it)."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5, semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"transform")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label transform. Allows to transform the each value into a human-readable label"),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapperCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout for input controls. Same as labelCol."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field and surroundings wrap className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"textFieldProps")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Props injected directly to ",(0,r.kt)("inlineCode",{parentName:"td"},"TextField")," ( valid only for non-checkbox ",(0,r.kt)("inlineCode",{parentName:"td"},"SelectField")," )."),(0,r.kt)("td",{parentName:"tr",align:"center"},"material, mui")))),(0,r.kt)("h5",{id:"props-usage-15"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { SelectField } from 'uniforms-unstyled';\n\n<SelectField\n  allowedValues={[value1, value2 /* ... */]}\n  checkboxes\n  disableItem={value => value % 2}\n  extra=\"Extra Feedback or Help\"\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  inline\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  labelProps={{shrink: true, disableAnimation: true}}\n  options={[{label: 'Hi', value: value1}, {label: 'Hello', value: value1} /* ... */]}\n  showInlineError\n  transform={value => label} //   Set of values that will be shown in the select.\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),(0,r.kt)("h3",{id:"submitfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"SubmitField")),(0,r.kt)("h5",{id:"props-15"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputRef")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")))),(0,r.kt)("h5",{id:"props-usage-16"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { SubmitField } from 'uniforms-unstyled';\n\n<SubmitField inputClassName=\"a b c\" inputRef={ref => {}} />;\n")),(0,r.kt)("h3",{id:"textfield"},(0,r.kt)("inlineCode",{parentName:"h3"},"TextField")),(0,r.kt)("h5",{id:"props-16"},"Props:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Available in"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"extra")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Extra feedback text. In the antd theme, this renders addtional help text below any validation messages."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"grid")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. Bootstrap grid layout style. Number is an equivalent of {sm: n}. Object is a {mode: size} object. Complete string is simply passed through."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"help")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help text. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"helpClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Help block className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"icon")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input icon. Semantic inputs can have an icon. By default, it's placed on the right side - to place it on the left, use ",(0,r.kt)("inlineCode",{parentName:"td"},"iconLeft")," prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"iconLeft")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Semantic inputs can have an icon. With this prop, it's placed on the left side - to place it on the right, use icon prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"iconProps")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input icon props. Semantic inputs can have an icon. These props are passed directly to the icon element."),(0,r.kt)("td",{parentName:"tr",align:"center"},"semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input wrapper class name. In bootstrap themes, passed className is used on field block. This is used on direct field wrapper."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"inputRef")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Setting ref prop to a field won't work as desired, because you'll receive a field component rather than an HTML input. If you need an input ref, use this prop instead."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Label className. A custom className for the field's label."),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"labelCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout of label. You can set span and/or offset."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field inline error. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd, bootstrap3, bootstrap4, bootstrap5, semantic")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"type")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Input type. HTML compatible input type like password. Default is text."),(0,r.kt)("td",{parentName:"tr",align:"center"},"All")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapperCol")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field layout. The layout for input controls. Same as labelCol."),(0,r.kt)("td",{parentName:"tr",align:"center"},"antd")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"wrapClassName")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field and sourroundings wrap className. ",(0,r.kt)("em",{parentName:"td"},"Some description would be great, huh?")),(0,r.kt)("td",{parentName:"tr",align:"center"},"bootstrap3, bootstrap4, bootstrap5")))),(0,r.kt)("h5",{id:"props-usage-17"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { TextField } from 'uniforms-unstyled';\n\n<TextField\n  extra=\"Extra Feedback or Help\"\n  grid=\"4\" // 'col-4-sm' on label, 'col-8-sm' on input\n  grid=\"col-6-xl\" // 'col-6-xl' on label, 'col-6-xl' on input\n  grid={3} // 'col-3-sm' on label, 'col-9-sm' on input\n  grid={{md: 5}} // 'col-5-md' on label, 'col-7-md' on input\n  help=\"Need help?\"\n  helpClassName=\"a b c\"\n  icon=\"user\"\n  iconLeft=\"user\"\n  iconProps={{onClick() {}}}\n  inputClassName=\"a b c\"\n  inputRef={ref => {}}\n  labelClassName=\"a b c\" // You can either specify them as a single string\n  labelClassName=[ 'a', 'b', 'c' ] // or as an array of strings\n  labelCol={{offset: 2}} // 'ant-col-offset-2' on label\n  labelCol={{span: 4}} // 'ant-col-4' on label\n  showInlineError\n  type=\"password\"   // Input type. HTML compatible input type like password. Default is text.\n  wrapClassName=\"a b c\"\n  wrapperCol={{offset: 2}} // 'ant-col-offset-2' on field\n  wrapperCol={{span: 4}} // 'ant-col-4' on field\n/>;\n")),(0,r.kt)("h2",{id:"common-props"},"Common props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"disabled")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field disabled state. It's passed directly to the field, but it propagates same as the label.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"label")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field label. This prop has three modes. If you pass a string, then it will be used as a label. If you pass a null, then it won't have a label, but nested fields will have default labels. If you pass a non-null falsy value, it won't have a label and nested fields won't have labels too.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field name. Used for identification. It should match your schema - if not, it will throw an error.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"placeholder")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field placeholder. If set to true, then a label will be used. Otherwise, it's handled like a label (including propagation).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"readOnly")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field read-only state. It's passed directly to the field, but it propagates same as the label.")))),(0,r.kt)("h5",{id:"props-usage-18"},"Props usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<SomeField disabled={false} label name="field" placeholder={false} />\n')),(0,r.kt)("h2",{id:"props-propagation"},"Props propagation"),(0,r.kt)("p",null,"Few props propagate in a very special way. These are ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"label"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"placeholder"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"readOnly"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<TextField />                    // default label | no      placeholder\n<TextField label="Text" />       // custom  label | no      placeholder\n<TextField label={false} />      // no      label | no      placeholder\n<TextField placeholder />        // default label | default placeholder\n<TextField placeholder="Text" /> // default label | custom  placeholder\n\n<NestField label={null}> // null = no label but the children have their labels\n    <TextField />\n</NestField>\n\n<NestField label={false}> // false = no label and the children have no labels\n    <TextField />\n</NestField>\n\n<ListField name="authors" disabled>          // Additions are disabled...\n    <ListItemField name="$" disabled>        // ...deletion too\n        <NestField disabled={false} name=""> // ...but editing is not.\n            <TextField name="name" />\n            <NumField  name="age" />\n        </NestField>\n    </ListItemField>\n</ListField>\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"label"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"placeholder"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"readOnly")," are casted to ",(0,r.kt)("inlineCode",{parentName:"p"},"Boolean")," before being passed to nested fields."))}m.isMDXComponent=!0}}]);