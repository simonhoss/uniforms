"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[269],{35318:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var a=n(27378);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=d(n),k=r,u=c["".concat(p,".").concat(k)]||c[k]||m[k]||i;return n?a.createElement(u,l(l({ref:t},s),{},{components:n})):a.createElement(u,l({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},15890:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return o},toc:function(){return d}});var a=n(25773),r=(n(27378),n(35318));const i={id:"api-helpers",title:"Helpers"},l=void 0,o={unversionedId:"api-helpers",id:"api-helpers",title:"Helpers",description:"connectField",source:"@site/../docs/api-helpers.md",sourceDirName:".",slug:"/api-helpers",permalink:"/docs/api-helpers",tags:[],version:"current",frontMatter:{id:"api-helpers",title:"Helpers"},sidebar:"docs",previous:{title:"Context data",permalink:"/docs/api-context-data"},next:{title:"AutoField algorithm",permalink:"/docs/uth-autofield-algorithm"}},p={},d=[{value:"<code>connectField</code>",id:"connectfield",level:2},{value:"Field kinds",id:"field-kinds",level:3},{value:"Props merging order",id:"props-merging-order",level:3},{value:"<code>changedKeys</code>",id:"changedkeys",level:2},{value:"<code>filterDOMProps</code>",id:"filterdomprops",level:2},{value:"Custom props registration",id:"custom-props-registration",level:3},{value:"<code>joinName</code>",id:"joinname",level:2},{value:"<code>randomIds</code>",id:"randomids",level:2},{value:"<code>useForm</code>",id:"useform",level:2},{value:"<code>useField</code>",id:"usefield",level:2}],s={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"connectfield"},(0,r.kt)("inlineCode",{parentName:"h2"},"connectField")),(0,r.kt)("p",null,"Provides form management related props. The ",(0,r.kt)("inlineCode",{parentName:"p"},"connectField")," helper is a component wrapper (higher order component, HOC), that provides various props related to the form management. It also adds the ",(0,r.kt)("inlineCode",{parentName:"p"},"Field")," suffix to the name of the wrapped component."),(0,r.kt)("p",null,"The table below lists all of the ",(0,r.kt)("strong",{parentName:"p"},"guaranteed")," props that will be passed to the wrapped component:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"changed")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Has field changed?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"disabled")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Is field disabled?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"error")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field scoped part of validation error.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"errorMessage")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field scoped validation error message.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"field")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"object")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field definition from schema.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"fields")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"arrayOf(string)")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Subfields names.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"fieldType")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"func")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"id")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field id - given or random.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"label")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field label.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"name")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"onChange")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"func(value, [name])")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Change field value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"placeholder")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"string")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field placeholder.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"readOnly")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Is field read-only?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"showInlineError")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Show inline error?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"any")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Field value.")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"connectField")," function accepts two arguments: the first one is a component and the second one is an ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function Example(props) {\n  /* ... */\n}\n\nconst ExampleField = connectField(Example, options);\n")),(0,r.kt)("p",null,"The table below lists all available options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"initialValue")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Initial value check. If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", then after the first render the default value is set as value if no value is provided (",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"),").")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"kind")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"'leaf'")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"'node'")),(0,r.kt)("td",{parentName:"tr",align:"center"},"See ",(0,r.kt)("a",{parentName:"td",href:"#field-kinds"},"Field kinds"),".")))),(0,r.kt)("h3",{id:"field-kinds"},"Field kinds"),(0,r.kt)("p",null,"Every field is either a ",(0,r.kt)("em",{parentName:"p"},"leaf")," or ",(0,r.kt)("em",{parentName:"p"},"node")," field. In the future, we could introduce new kinds to enable even more optimizations."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Leaf")," fields cannot have subfields. This allows us to perform some optimizations, like skipping the extra ",(0,r.kt)("inlineCode",{parentName:"li"},"Provider")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"connectField"),", effectively reducing the overhead down to a single ",(0,r.kt)("inlineCode",{parentName:"li"},"useField")," call.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It includes all input fields, like ",(0,r.kt)("inlineCode",{parentName:"li"},"NumField"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"SelectField")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"TextField"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"Node")," fields can have subfields. Fields of the ",(0,r.kt)("em",{parentName:"li"},"leaf")," kind cannot have subfields.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It includes all combined and layout fields, like ",(0,r.kt)("inlineCode",{parentName:"li"},"ListField")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"NestField"),".")))),(0,r.kt)("p",null,"If you are not sure which one to use, do not use the ",(0,r.kt)("inlineCode",{parentName:"p"},"kind")," option at all - it'll default to the safest option (right now it's ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),")."),(0,r.kt)("h3",{id:"props-merging-order"},"Props merging order"),(0,r.kt)("p",null,"The resulting props of a field are a merge of the props that uniforms provide, the ones coming from the bridge (schema) and finally the actual field props. For the exact ordering, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms/src/useField.tsx"},"source of ",(0,r.kt)("inlineCode",{parentName:"a"},"useField")," hook"),". Overall, it looks as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"uniforms props (e.g., ",(0,r.kt)("inlineCode",{parentName:"li"},"changed"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"onChange"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"value"),")."),(0,r.kt)("li",{parentName:"ol"},"uniforms state (as defined in ",(0,r.kt)("a",{parentName:"li",href:"/docs/api-context-data/#state"},"context data"),")."),(0,r.kt)("li",{parentName:"ol"},"bridge props (depending on the schema)"),(0,r.kt)("li",{parentName:"ol"},"field props (only when rendered directly)")),(0,r.kt)("p",null,"That's important, as using empty values in the schema or field props, like ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),", will be merged as well. See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/issues/1094"},"#1094")," for more context as well as an example of a potential pitfall."),(0,r.kt)("h2",{id:"changedkeys"},(0,r.kt)("inlineCode",{parentName:"h2"},"changedKeys")),(0,r.kt)("p",null,"Returns an array of changed keys between ",(0,r.kt)("inlineCode",{parentName:"p"},"valueA")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"valueB"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"root")," is the root key. For examples see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms/__tests__/changedKeys.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"changedKeys")," tests"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { changedKeys } from 'uniforms';\n\nchangedKeys('a', { b: 1, c: 2 }, { b: 1 }); // ['a', 'a.c']\n")),(0,r.kt)("h2",{id:"filterdomprops"},(0,r.kt)("inlineCode",{parentName:"h2"},"filterDOMProps")),(0,r.kt)("p",null,"Removes all uniforms-related props, registered with ",(0,r.kt)("inlineCode",{parentName:"p"},"filterDOMProps.register"),". Use it in all places where you'd like to pass all unrelated props down and ",(0,r.kt)("inlineCode",{parentName:"p"},"useField")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"connectField")," provide you with the props."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { filterDOMProps } from 'uniforms';\n\nconst filteredProps = filterDOMProps(props);\n")),(0,r.kt)("h3",{id:"custom-props-registration"},"Custom props registration"),(0,r.kt)("p",null,"It's often the case that your custom components will have a bunch of known properties, like ",(0,r.kt)("inlineCode",{parentName:"p"},"locale")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"userType"),". To ease the process of using them across the project, you can register them to make ",(0,r.kt)("inlineCode",{parentName:"p"},"filterDOMProps")," remove them as well. For example, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms-bridge-simple-schema/src/register.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"SimpleSchemaBridge"))," registers all of the SimpleSchema-specific options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { filterDOMProps } from 'uniforms';\n\nfilterDOMProps({ example: 42 }); // { example: 42 }\nfilterDOMProps.registered.includes('example'); // false\nfilterDOMProps.register('example');\nfilterDOMProps.registered.includes('example'); // true\nfilterDOMProps({ example: 42 }); // {}\n")),(0,r.kt)("p",null,"As ",(0,r.kt)("inlineCode",{parentName:"p"},"filterDOMProps")," is fully typed, if you'd like to make it work with TypeScript, you have to extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterDOMProps")," interface as well."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"declare module 'uniforms' {\n  interface FilterDOMProps {\n    propA: never;\n    propB: never;\n  }\n}\n\nfilterDOMProps.register('propA', 'propB');\n")),(0,r.kt)("h2",{id:"joinname"},(0,r.kt)("inlineCode",{parentName:"h2"},"joinName")),(0,r.kt)("p",null,"Safely joins partial field names.\nIf you create a custom field with subfields, do use ",(0,r.kt)("inlineCode",{parentName:"p"},"joinName")," instead of manually concatenating them.\nIt ensures that the name will be correctly escaped if needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { joinName } from 'uniforms';\n\njoinName('array', 1, 'field'); // 'array.1.field'\njoinName('object', 'nested.property'); // 'object.nested.property'\n")),(0,r.kt)("p",null,"If the first argument is ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),", then it returns an array of escaped parts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { joinName } from 'uniforms';\n\njoinName(null, 'array', 1, 'field'); // ['array', '1', 'field']\njoinName(null, 'object', 'nested.property'); // ['object', 'nested', 'property']\n")),(0,r.kt)("p",null,"If the field name contains a dot (",(0,r.kt)("inlineCode",{parentName:"p"},"."),") or a bracket (",(0,r.kt)("inlineCode",{parentName:"p"},"[")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"]"),"), it has to be escaped with ",(0,r.kt)("inlineCode",{parentName:"p"},'["..."]'),".\nIf any of these characters is not escaped, ",(0,r.kt)("inlineCode",{parentName:"p"},"joinName")," will ",(0,r.kt)("strong",{parentName:"p"},"not")," throw an error but its behavior is not specified.\nThe escape of any other name part will be stripped."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"joinName(null, 'object[\"with.dot\"].field'); // ['object', '[\"with.dot\"]', 'field']\njoinName('object[\"with.dot\"].field'); // 'object[\"with.dot\"].field'\n\njoinName(null, 'this[\"is\"].safe'); // ['this', 'is', 'safe']\njoinName('this[\"is\"].safe'); // 'this.is.safe'\n")),(0,r.kt)("p",null,"For more examples check ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/vazco/uniforms/blob/master/packages/uniforms/__tests__/joinName.ts"},(0,r.kt)("inlineCode",{parentName:"a"},"joinName")," tests"),"."),(0,r.kt)("h2",{id:"randomids"},(0,r.kt)("inlineCode",{parentName:"h2"},"randomIds")),(0,r.kt)("p",null,"Generates random ID, based on given prefix. Use it, if you want to have random but deterministic strings. If no prefix is provided, a unique ",(0,r.kt)("inlineCode",{parentName:"p"},"uniforms-X")," prefix will be used generated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { randomIds } from 'uniforms';\n\nconst randomId1 = randomIds();\nrandomId1(); // uniforms-0000-0000\nrandomId1(); // uniforms-0000-0001\nrandomId1(); // uniforms-0000-0002\n\nconst randomId2 = randomIds();\nrandomId2(); // uniforms-0001-0000\nrandomId2(); // uniforms-0001-0001\nrandomId2(); // uniforms-0001-0002\n\nconst randomId3 = randomIds('prefix');\nrandomId3(); // prefix-0000\nrandomId3(); // prefix-0001\nrandomId3(); // prefix-0002\n")),(0,r.kt)("h2",{id:"useform"},(0,r.kt)("inlineCode",{parentName:"h2"},"useForm")),(0,r.kt)("p",null,"A direct way of accessing the ",(0,r.kt)("a",{parentName:"p",href:"/docs/api-context-data/#state"},"context data"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useForm } from 'uniforms';\n\nfunction Example() {\n  const context = useForm();\n}\n")),(0,r.kt)("h2",{id:"usefield"},(0,r.kt)("inlineCode",{parentName:"h2"},"useField")),(0,r.kt)("p",null,"A hook version of ",(0,r.kt)("a",{parentName:"p",href:"#connectfield"},(0,r.kt)("inlineCode",{parentName:"a"},"connectField")),". It receives three arguments: field name (",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"), field props (",(0,r.kt)("inlineCode",{parentName:"p"},"object"),"), and optional options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function Example(props) {\n  const [fieldProps, context] = useField(props.name, props, options);\n  return <input {...filterDOMProps(fieldProps)} />;\n}\n")),(0,r.kt)("p",null,"The table below lists all available options:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Default"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"absoluteName")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Whether the field name should be treated as a top-level one, ignoring parent fields.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"initialValue")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"boolean")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:"center"},"Initial value check. If ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", then after the first render the default value is set as value if no value is provided (",(0,r.kt)("inlineCode",{parentName:"td"},"undefined"),").")))),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"useField")," allows you to create components that combine values of multiple fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useField } from 'uniforms';\n\nfunction ArePasswordsEqual() {\n  const [{ value: passwordA }] = useField('passwordA', {});\n  const [{ value: passwordB }] = useField('passwordB', {});\n  const areEqual = passwordA === passwordB;\n  return <div>{`Passwords are ${areEqual ? 'equal' : 'not equal'}`}</div>;\n}\n")))}m.isMDXComponent=!0}}]);